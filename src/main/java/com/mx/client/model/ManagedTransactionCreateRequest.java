/*
 * MX Platform API
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mx.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mx.client.JSON;

/**
 * ManagedTransactionCreateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ManagedTransactionCreateRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CHECK_NUMBER_STRING = "check_number_string";
  @SerializedName(SERIALIZED_NAME_CHECK_NUMBER_STRING)
  private String checkNumberString;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_INTERNATIONAL = "is_international";
  @SerializedName(SERIALIZED_NAME_IS_INTERNATIONAL)
  private Boolean isInternational;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LOCALIZED_DESCRIPTION = "localized_description";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_DESCRIPTION)
  private String localizedDescription;

  public static final String SERIALIZED_NAME_LOCALIZED_MEMO = "localized_memo";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_MEMO)
  private String localizedMemo;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchant_category_code";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private Integer merchantCategoryCode;

  public static final String SERIALIZED_NAME_MERCHANT_GUID = "merchant_guid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_GUID)
  private String merchantGuid;

  public static final String SERIALIZED_NAME_MERCHANT_LOCATION_GUID = "merchant_location_guid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_LOCATION_GUID)
  private String merchantLocationGuid;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_POSTED_AT = "posted_at";
  @SerializedName(SERIALIZED_NAME_POSTED_AT)
  private String postedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TRANSACTED_AT = "transacted_at";
  @SerializedName(SERIALIZED_NAME_TRANSACTED_AT)
  private String transactedAt;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ManagedTransactionCreateRequest() {
  }

  public ManagedTransactionCreateRequest amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public ManagedTransactionCreateRequest category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public ManagedTransactionCreateRequest checkNumberString(String checkNumberString) {
    
    this.checkNumberString = checkNumberString;
    return this;
  }

   /**
   * Get checkNumberString
   * @return checkNumberString
  **/
  @javax.annotation.Nullable
  public String getCheckNumberString() {
    return checkNumberString;
  }


  public void setCheckNumberString(String checkNumberString) {
    this.checkNumberString = checkNumberString;
  }


  public ManagedTransactionCreateRequest currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ManagedTransactionCreateRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ManagedTransactionCreateRequest id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ManagedTransactionCreateRequest isInternational(Boolean isInternational) {
    
    this.isInternational = isInternational;
    return this;
  }

   /**
   * Get isInternational
   * @return isInternational
  **/
  @javax.annotation.Nullable
  public Boolean getIsInternational() {
    return isInternational;
  }


  public void setIsInternational(Boolean isInternational) {
    this.isInternational = isInternational;
  }


  public ManagedTransactionCreateRequest latitude(BigDecimal latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * @return latitude
  **/
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }


  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public ManagedTransactionCreateRequest localizedDescription(String localizedDescription) {
    
    this.localizedDescription = localizedDescription;
    return this;
  }

   /**
   * Get localizedDescription
   * @return localizedDescription
  **/
  @javax.annotation.Nullable
  public String getLocalizedDescription() {
    return localizedDescription;
  }


  public void setLocalizedDescription(String localizedDescription) {
    this.localizedDescription = localizedDescription;
  }


  public ManagedTransactionCreateRequest localizedMemo(String localizedMemo) {
    
    this.localizedMemo = localizedMemo;
    return this;
  }

   /**
   * Get localizedMemo
   * @return localizedMemo
  **/
  @javax.annotation.Nullable
  public String getLocalizedMemo() {
    return localizedMemo;
  }


  public void setLocalizedMemo(String localizedMemo) {
    this.localizedMemo = localizedMemo;
  }


  public ManagedTransactionCreateRequest longitude(BigDecimal longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * @return longitude
  **/
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }


  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public ManagedTransactionCreateRequest memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public ManagedTransactionCreateRequest merchantCategoryCode(Integer merchantCategoryCode) {
    
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

   /**
   * Get merchantCategoryCode
   * @return merchantCategoryCode
  **/
  @javax.annotation.Nullable
  public Integer getMerchantCategoryCode() {
    return merchantCategoryCode;
  }


  public void setMerchantCategoryCode(Integer merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public ManagedTransactionCreateRequest merchantGuid(String merchantGuid) {
    
    this.merchantGuid = merchantGuid;
    return this;
  }

   /**
   * Get merchantGuid
   * @return merchantGuid
  **/
  @javax.annotation.Nullable
  public String getMerchantGuid() {
    return merchantGuid;
  }


  public void setMerchantGuid(String merchantGuid) {
    this.merchantGuid = merchantGuid;
  }


  public ManagedTransactionCreateRequest merchantLocationGuid(String merchantLocationGuid) {
    
    this.merchantLocationGuid = merchantLocationGuid;
    return this;
  }

   /**
   * Get merchantLocationGuid
   * @return merchantLocationGuid
  **/
  @javax.annotation.Nullable
  public String getMerchantLocationGuid() {
    return merchantLocationGuid;
  }


  public void setMerchantLocationGuid(String merchantLocationGuid) {
    this.merchantLocationGuid = merchantLocationGuid;
  }


  public ManagedTransactionCreateRequest metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public ManagedTransactionCreateRequest postedAt(String postedAt) {
    
    this.postedAt = postedAt;
    return this;
  }

   /**
   * Get postedAt
   * @return postedAt
  **/
  @javax.annotation.Nullable
  public String getPostedAt() {
    return postedAt;
  }


  public void setPostedAt(String postedAt) {
    this.postedAt = postedAt;
  }


  public ManagedTransactionCreateRequest status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ManagedTransactionCreateRequest transactedAt(String transactedAt) {
    
    this.transactedAt = transactedAt;
    return this;
  }

   /**
   * Get transactedAt
   * @return transactedAt
  **/
  @javax.annotation.Nonnull
  public String getTransactedAt() {
    return transactedAt;
  }


  public void setTransactedAt(String transactedAt) {
    this.transactedAt = transactedAt;
  }


  public ManagedTransactionCreateRequest type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedTransactionCreateRequest managedTransactionCreateRequest = (ManagedTransactionCreateRequest) o;
    return Objects.equals(this.amount, managedTransactionCreateRequest.amount) &&
        Objects.equals(this.category, managedTransactionCreateRequest.category) &&
        Objects.equals(this.checkNumberString, managedTransactionCreateRequest.checkNumberString) &&
        Objects.equals(this.currencyCode, managedTransactionCreateRequest.currencyCode) &&
        Objects.equals(this.description, managedTransactionCreateRequest.description) &&
        Objects.equals(this.id, managedTransactionCreateRequest.id) &&
        Objects.equals(this.isInternational, managedTransactionCreateRequest.isInternational) &&
        Objects.equals(this.latitude, managedTransactionCreateRequest.latitude) &&
        Objects.equals(this.localizedDescription, managedTransactionCreateRequest.localizedDescription) &&
        Objects.equals(this.localizedMemo, managedTransactionCreateRequest.localizedMemo) &&
        Objects.equals(this.longitude, managedTransactionCreateRequest.longitude) &&
        Objects.equals(this.memo, managedTransactionCreateRequest.memo) &&
        Objects.equals(this.merchantCategoryCode, managedTransactionCreateRequest.merchantCategoryCode) &&
        Objects.equals(this.merchantGuid, managedTransactionCreateRequest.merchantGuid) &&
        Objects.equals(this.merchantLocationGuid, managedTransactionCreateRequest.merchantLocationGuid) &&
        Objects.equals(this.metadata, managedTransactionCreateRequest.metadata) &&
        Objects.equals(this.postedAt, managedTransactionCreateRequest.postedAt) &&
        Objects.equals(this.status, managedTransactionCreateRequest.status) &&
        Objects.equals(this.transactedAt, managedTransactionCreateRequest.transactedAt) &&
        Objects.equals(this.type, managedTransactionCreateRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, category, checkNumberString, currencyCode, description, id, isInternational, latitude, localizedDescription, localizedMemo, longitude, memo, merchantCategoryCode, merchantGuid, merchantLocationGuid, metadata, postedAt, status, transactedAt, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedTransactionCreateRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    checkNumberString: ").append(toIndentedString(checkNumberString)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isInternational: ").append(toIndentedString(isInternational)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    localizedDescription: ").append(toIndentedString(localizedDescription)).append("\n");
    sb.append("    localizedMemo: ").append(toIndentedString(localizedMemo)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    merchantGuid: ").append(toIndentedString(merchantGuid)).append("\n");
    sb.append("    merchantLocationGuid: ").append(toIndentedString(merchantLocationGuid)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    postedAt: ").append(toIndentedString(postedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transactedAt: ").append(toIndentedString(transactedAt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("category");
    openapiFields.add("check_number_string");
    openapiFields.add("currency_code");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("is_international");
    openapiFields.add("latitude");
    openapiFields.add("localized_description");
    openapiFields.add("localized_memo");
    openapiFields.add("longitude");
    openapiFields.add("memo");
    openapiFields.add("merchant_category_code");
    openapiFields.add("merchant_guid");
    openapiFields.add("merchant_location_guid");
    openapiFields.add("metadata");
    openapiFields.add("posted_at");
    openapiFields.add("status");
    openapiFields.add("transacted_at");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("transacted_at");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ManagedTransactionCreateRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedTransactionCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedTransactionCreateRequest is not found in the empty JSON string", ManagedTransactionCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedTransactionCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedTransactionCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ManagedTransactionCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("check_number_string") != null && !jsonObj.get("check_number_string").isJsonNull()) && !jsonObj.get("check_number_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_number_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_number_string").toString()));
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("localized_description") != null && !jsonObj.get("localized_description").isJsonNull()) && !jsonObj.get("localized_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localized_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localized_description").toString()));
      }
      if ((jsonObj.get("localized_memo") != null && !jsonObj.get("localized_memo").isJsonNull()) && !jsonObj.get("localized_memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localized_memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localized_memo").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("merchant_guid") != null && !jsonObj.get("merchant_guid").isJsonNull()) && !jsonObj.get("merchant_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_guid").toString()));
      }
      if ((jsonObj.get("merchant_location_guid") != null && !jsonObj.get("merchant_location_guid").isJsonNull()) && !jsonObj.get("merchant_location_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_location_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_location_guid").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("posted_at") != null && !jsonObj.get("posted_at").isJsonNull()) && !jsonObj.get("posted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posted_at").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("transacted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transacted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transacted_at").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedTransactionCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedTransactionCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedTransactionCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedTransactionCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedTransactionCreateRequest>() {
           @Override
           public void write(JsonWriter out, ManagedTransactionCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedTransactionCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ManagedTransactionCreateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ManagedTransactionCreateRequest
  * @throws IOException if the JSON string is invalid with respect to ManagedTransactionCreateRequest
  */
  public static ManagedTransactionCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedTransactionCreateRequest.class);
  }

 /**
  * Convert an instance of ManagedTransactionCreateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

