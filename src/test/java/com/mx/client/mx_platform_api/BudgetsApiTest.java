/*
 * MX Platform API
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mx.client.mx_platform_api;

import com.mx.client.ApiException;
import com.mx.client.model.BudgetCreateRequestBody;
import com.mx.client.model.BudgetResponseBody;
import com.mx.client.model.BudgetUpdateRequestBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BudgetsApi
 */
@Disabled
public class BudgetsApiTest {

    private final BudgetsApi api = new BudgetsApi();

    /**
     * Delete a budget
     *
     * Delete a budget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserGuidBudgetsBudgetGuidDeleteTest() throws ApiException {
        String userGuid = null;
        String budgetGuid = null;
        api.usersUserGuidBudgetsBudgetGuidDelete(userGuid, budgetGuid);
        // TODO: test validations
    }

    /**
     * Read a specific budget
     *
     * Read a specific budget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserGuidBudgetsBudgetGuidGetTest() throws ApiException {
        String budgetGuid = null;
        String userGuid = null;
        BudgetResponseBody response = api.usersUserGuidBudgetsBudgetGuidGet(budgetGuid, userGuid);
        // TODO: test validations
    }

    /**
     * Update a specific budget
     *
     * Update a specific budget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserGuidBudgetsBudgetGuidPutTest() throws ApiException {
        String userGuid = null;
        String budgetGuid = null;
        BudgetUpdateRequestBody budgetUpdateRequestBody = null;
        BudgetResponseBody response = api.usersUserGuidBudgetsBudgetGuidPut(userGuid, budgetGuid, budgetUpdateRequestBody);
        // TODO: test validations
    }

    /**
     * Auto-generate budgets
     *
     * This endpoint will automatically create budgets for several categories based on existing transactions; these budgets are returned as an array. Specifically, budgets will only be generated if the &#x60;user&#x60; has at least one &#x60;transaction&#x60; in a given category during each of the two previous calendar months. For example, if the request is made on March 6, and there is at least one \&quot;Bills &amp; Utilities\&quot; &#x60;transaction&#x60; in both January and February, a budget will be generated for \&quot;Bills &amp; Utilities.\&quot; If there are two \&quot;Bills &amp; Utilities\&quot; transactions in February but none in January, no budget will be generated for that category. If budgets already exist for particular categories, new budgets will be generated and returned based on the available transactions. If one or more budgets remain unchanged, they will nevertheless be returned in the response. If no transaction data for the &#x60;user&#x60; meet the above criteria, a &#x60;422 Unprocessable Entity&#x60; error will be returned with status code 4221 along with the message, &#x60;There aren&#39;t enough transactions to automatically create any budgets&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserGuidBudgetsGeneratePostTest() throws ApiException {
        String userGuid = null;
        BudgetResponseBody response = api.usersUserGuidBudgetsGeneratePost(userGuid);
        // TODO: test validations
    }

    /**
     * List all budgets
     *
     * List all budgets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserGuidBudgetsGetTest() throws ApiException {
        String userGuid = null;
        BudgetResponseBody response = api.usersUserGuidBudgetsGet(userGuid);
        // TODO: test validations
    }

    /**
     * Create a budget
     *
     * Create a budget. This endpoint accepts the optional &#x60;MX-Skip-Webhook&#x60; header and &#x60;skip_webhook&#x60; parameter. You cannot create a duplicate budget. For example, if you attempt to create a budget for \&quot;Gas\&quot;, but that budget already exist, the request will fail. You can retrieve a list of all existing categories by using the List Categories endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserGuidBudgetsPostTest() throws ApiException {
        String userGuid = null;
        BudgetCreateRequestBody budgetCreateRequestBody = null;
        BudgetResponseBody response = api.usersUserGuidBudgetsPost(userGuid, budgetCreateRequestBody);
        // TODO: test validations
    }

}
